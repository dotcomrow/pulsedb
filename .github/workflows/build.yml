name: "Build and Deploy DB Schema"

on:
  push:
    branches: ["prod", "dev"]

permissions: write-all

jobs:
  build:
    name: "build"
    runs-on: ubuntu-latest
    env:
      TF_API_TOKEN: ${{ secrets.TFE_TOKEN }}
      TF_CLOUD_ORGANIZATION: ${{ github.repository_owner }}
    steps:
      - name: Check state of initial-deploy workflow
        id: check_state
        run: |
          echo "initial_deploy_state=$(gh api -H 'Accept: application/vnd.github+json' -H 'X-GitHub-Api-Version: 2022-11-28' /repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/workflows/initial-deploy.yml | jq -r '.state')" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Checkout
        if: ${{ steps.check_state.outputs.initial_deploy_state == 'disabled_manually' }}
        uses: actions/checkout@v3

      - name: Get next version
        uses: reecetech/version-increment@2023.9.3
        id: version
        if: ${{ steps.check_state.outputs.initial_deploy_state == 'disabled_manually' }}
        with:
          scheme: calver
          increment: patch

      - name: Set variables
        id: setvars
        if: ${{ steps.check_state.outputs.initial_deploy_state == 'disabled_manually' }}
        run: |
              if [[ "${{github.base_ref}}" == "dev" || "${{github.ref}}" == "refs/heads/dev" ]]; then
                echo "environment=dev" >> $GITHUB_OUTPUT
              fi
    
              if [[ "${{github.base_ref}}" == "prod" || "${{github.ref}}" == "refs/heads/prod" ]]; then
                echo "environment=prod" >> $GITHUB_OUTPUT
              fi

      - name: Create release
        uses: "actions/github-script@v6"
        if: ${{ steps.check_state.outputs.initial_deploy_state == 'disabled_manually' }}
        env:
          VERSION: ${{ steps.version.outputs.version }}
        with:
          github-token: "${{ github.token }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.VERSION,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.VERSION,
                target_commitish: '${{ steps.setvars.outputs.environment }}'
              });
              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }

      - uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.1.1
        id: upload
        if: ${{ steps.check_state.outputs.initial_deploy_state == 'disabled_manually' }}
        with:
          workspace: ${{ github.event.repository.name }}-${{ steps.setvars.outputs.environment }}
          directory: release

      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.1.1
        id: apply-run
        if: ${{ steps.check_state.outputs.initial_deploy_state == 'disabled_manually' }}
        with:
          workspace: ${{ github.event.repository.name }}-${{ steps.setvars.outputs.environment }}
          configuration_version: ${{ steps.upload.outputs.configuration_version_id }}
          plan_only: false
